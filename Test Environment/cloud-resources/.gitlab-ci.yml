include:
  - local: .gitlab-ci-helpers.yml
  - local: .gitlab-ci-pylint.yml
  - local: .gitlab-ci-shelllint.yml
  - local: .gitlab-ci-yamllint.yml
  # - template: Jobs/Build.gitlab-ci.yml

stages:
  - data-validation
  - GitOps-Checks

networkIntegrity:
  stage: GitOps-Checks
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      allow_failure: true
  image: registry.gitlab.com/kohls/infra/platform_enablement/cloud-config/cloud-config-ci-image/main
  before_script:
    - 'curl --location --output artifacts.zip "https://gitlab.com/api/v4/projects/${UPSTREAM}/jobs/$UPSTREAMJOBID/artifacts?job_token=${CI_JOB_TOKEN}" -v'
    - unzip artifacts.zip
  script:
    - STATUS=0
    - >
      for dir in $(ls processed_values); do
        echo "Processing Values for $dir"
        python3 integrity_check/integrity_check.py ./processed_values/$dir/processed_values.yml || STATUS=1
      done
    - exit $STATUS

build_resources:
    stage: GitOps-Checks
    image: registry.gitlab.com/kohls/infra/platform_enablement/cloud-config/cloud-config-ci-image/main
    rules:
        - if: '$CI_PIPELINE_SOURCE == "pipeline"'
          allow_failure: true
    before_script:
        - 'curl --location --output artifacts.zip "https://gitlab.com/api/v4/projects/${UPSTREAM}/jobs/$UPSTREAMJOBID/artifacts?job_token=${CI_JOB_TOKEN}" -v'
        - unzip artifacts.zip
    script:
        - mkdir cr_output
        - STATUS=0
        - >
         for dir in $(ls processed_values); do
             echo $dir
             mkdir cr_output/$dir
             for temp in $(ls templates/gcp-project); do
                 j2 templates/gcp-project/$temp processed_values/$dir/processed_values.yml -o cr_output/$dir/$temp.yml --filters scripts/j2_filters.py || STATUS=1
             done
             find cr_output/$dir/ -type 'f' -size -4c -delete
             for file in $(ls cr_output/$dir); do
                 mv -- cr_output/$dir/$file cr_output/$dir/${file%.yml.j2.yml}.yml
             done
         done
        - exit $STATUS
    artifacts:
      expire_in: 1 week
      paths:
      - cr_output/*

opa-check:
    stage: GitOps-Checks
    image: registry.gitlab.com/kohls/infra/platform_enablement/cloud-config/cloud-config-ci-image/main
    #image: registry.gitlab.com/kohls/infra/platform_enablement/cloud-config/cloud-config-ci-image/prm-qaconfig:latest
    rules:
        - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    tags:
      - internal
    variables:
      HTTPS_PROXY: "http://proxy.kohls.com:3128"
      HTTP_PROXY: "http://proxy.kohls.com:3128"
      https_proxy: "http://proxy.kohls.com:3128"
      http_proxy: "http://proxy.kohls.com:3128"
      VAULT_ADDR: "https://vault-us-central1-primary.kohls.com:8200"
    before_script:
        - export VAULT_TOKEN="$(vault write -field=token auth/jwt-GitLab/login role=gitlab-dynamic-v1 jwt=$CI_JOB_JWT)"
        - export AUTO_COMMENT_TOKEN="$(vault kv get -field=automated-comment kv-gitlab/${CI_PROJECT_PATH}/project-tokens)"
        - 'curl --location --output artifacts.zip "https://gitlab.com/api/v4/projects/${UPSTREAM}/jobs/$UPSTREAMJOBID/artifacts?job_token=${CI_JOB_TOKEN}" -v'
        - unzip artifacts.zip
        - mkdir /tmp/opa
        - touch /tmp/opa.log
        - touch /tmp/report.txt
    script:
      - error=false
      - cd $CI_PROJECT_DIR/opa
      - python3 $CI_PROJECT_DIR/scripts/opa.py --log_file=/tmp/opa.log --input=$CI_PROJECT_DIR/processed_values --opa_binary=/usr/bin/opa --suite_definition=$CI_PROJECT_DIR/opa/policy_suite.yml --report_file=/tmp/report.txt --cluster_environment=$PROJECT_NAME || error=true
      - python3 $CI_PROJECT_DIR/scripts/python_lib/MR_comment_report.py --report=/tmp/report.txt --project_id=$UPSTREAM --merge_request_id=$MR_ID --token=$AUTO_COMMENT_TOKEN --error_codes=../scripts/python_lib/error_codes.yml
      - >
        if [ $error == true ];
        then
          head -1000 /tmp/opa.log
          echo ----End of opa.log, max limit of 1,000 lines able to be printed. Full file is available as artifact in case it is larger.----
          mv /tmp/opa.log $CI_PROJECT_DIR/opa.log
          mv  /tmp/report.txt $CI_PROJECT_DIR/report.txt
          python3 $CI_PROJECT_DIR/scripts/color_file_print.py --input=$CI_PROJECT_DIR/report.txt
          echo ----ERROR: OPA Validation Check has Failed----
          exit 1
        else
          mv /tmp/opa.log $CI_PROJECT_DIR/opa.log
          mv /tmp/report.txt $CI_PROJECT_DIR/report.txt
          python3 $CI_PROJECT_DIR/scripts/color_file_print.py --input=$CI_PROJECT_DIR/report.txt
          echo ----OPA Validation Check has Passed----
          exit 0
        fi
    artifacts:
      when: always
      expire_in: 1 week
      paths:
      - opa.log
      - report.txt

cerberus-check:
    stage: GitOps-Checks
    image: registry.gitlab.com/kohls/infra/platform_enablement/cloud-config/cloud-config-ci-image/main
    rules:
        - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    tags:
      - internal
    variables:
      GOLANG_YQ_VERSION: "4.6.2"
      HIERARCHY_VERSION: "0.1.1"
      HTTPS_PROXY: "http://proxy.kohls.com:3128"
      HTTP_PROXY: "http://proxy.kohls.com:3128"
      https_proxy: "http://proxy.kohls.com:3128"
      http_proxy: "http://proxy.kohls.com:3128"
      VAULT_ADDR: "https://vault-us-central1-primary.kohls.com:8200"
    before_script:
        - export VAULT_TOKEN="$(vault write -field=token auth/jwt-GitLab/login role=gitlab-dynamic-v1 jwt=$CI_JOB_JWT)"
        - export AUTO_COMMENT_TOKEN="$(vault kv get -field=automated-comment kv-gitlab/${CI_PROJECT_PATH}/project-tokens)"
        - 'curl --location --output artifacts.zip "https://gitlab.com/api/v4/projects/${UPSTREAM}/jobs/$UPSTREAMJOBID/artifacts?job_token=${CI_JOB_TOKEN}" -v'
        - unzip artifacts.zip
        - touch /tmp/schema_report.txt
        - hierarchy -b "schemas/gcp_project_schemas/" -f "hierarchy.lst" -o "processed_schema_templates.yml"
        - head -20 processed_schema_templates.yml
    script:
      - error=false
      - python3 $CI_PROJECT_DIR/scripts/cerberus_validation.py --input $CI_PROJECT_DIR/processed_values --schema_file $CI_PROJECT_DIR/processed_schema_templates.yml --report_file=/tmp/schema_report.txt --schema_config=$CI_PROJECT_DIR/cerberus.yml || error=true
      - python3 $CI_PROJECT_DIR/scripts/python_lib/MR_comment_report.py --report=/tmp/schema_report.txt --project_id=$UPSTREAM --merge_request_id=$MR_ID --token=$AUTO_COMMENT_TOKEN --error_codes=./scripts/python_lib/error_codes.yml
      - python3 $CI_PROJECT_DIR/scripts/color_file_print.py --input=/tmp/schema_report.txt --red_line_strings="Validation error" --yellow_line_strings="start,end,Error Reporting" --red_strings="ERROR->,FAILED" --green_strings="PASSED"
      - mv /tmp/schema_report.txt $CI_PROJECT_DIR/schema_report.txt
      - >
        if [ $error == true ];
        then
          echo ----ERROR: Schema Validation has Failed----
          exit 1
        else
          echo ----SUCCESS: Schema Validation has Passed----
          exit 0
        fi
    artifacts:
      when: always
      expire_in: 1 week
      paths:
      - schema_report.txt
# eunomia_webhook:
#   # Need to exclude global before_script
#   before_script: []
#   stage: Eunomia-Webhook
#   image: registry.gitlab.com$CI_PROJECT_DIR/main:latest
#   tags:
#     - internal
#   only:
#     - main
#   extends:
#     - .internal
#   variables:
#     HTTPS_PROXY: "http://proxy-gcp-central.kohls.com:8080"
#     HTTP_PROXY: "http://proxy-gcp-central.kohls.com:8080"
#     https_proxy: "http://proxy-gcp-central.kohls.com:8080"
#     http_proxy: "http://proxy-gcp-central.kohls.com:8080"
#     NO_PROXY: ".svc,.local,.internal,.internal.,.gcr.io,.googleapis.com,.kohls.com,100.64.0.0/8,10.0.0.0/8"
#     no_proxy: ".svc,.local,.internal,.internal.,.gcr.io,.googleapis.com,.kohls.com,100.64.0.0/8,10.0.0.0/8"
#   script:
#     - python3 /app/scripts/eunomia_webhook.py --eunomia_url="$EUNOMIA_URL" --git_ref="$CI_COMMIT_REF_NAME" --git_repo="$CI_PROJECT_URL"
